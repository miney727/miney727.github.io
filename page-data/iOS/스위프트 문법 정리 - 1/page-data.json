{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/iOS/스위프트 문법 정리 - 1/","result":{"data":{"site":{"siteMetadata":{"title":"민 블로그"}},"markdownRemark":{"id":"c84627e4-d4d2-546b-9073-7c5852af4be9","excerpt":"Swift 문법 bookmark optional (nullable 처리) Swift에서 null은 nil. 강타입 언어인 Swift에서 Nullable끼리의 연산은 대체로 지원되지 않음. 따라서 Non-Nullable…","html":"<h1>Swift 문법</h1>\n<p><a href=\"https://jusung.gitbook.io/the-swift-language-guide/\">bookmark</a></p>\n<h3>optional (nullable 처리)</h3>\n<p>Swift에서 null은 nil.</p>\n<p>강타입 언어인 Swift에서 Nullable끼리의 연산은 대체로 지원되지 않음.</p>\n<p>따라서 Non-Nullable로 변환해줘야 함. → 타입 가드 필요.</p>\n<p>타입 가드는 여러 스타일이 있음.</p>\n<ol>\n<li>\n<p><code class=\"language-text\">nullable ?? 0</code>  TS처럼 예외처리, 얘는 Only nil일때만 작동함.</p>\n</li>\n<li>\n<p><code class=\"language-text\">nullable!</code> = <code class=\"language-text\">nullable as number</code>  강제 타입 형변환</p>\n</li>\n<li>\n<p>IF - ELSE</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> money <span class=\"token operator\">==</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"NO VALUE\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>money<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>IF - ELSE로도 타입가드 가능하지만 TS처럼 자동으로 타입가드를 해주지는 않음.</p>\n<p>! 사용해서 강제 형변환 해줘야 함.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> copiedMoney <span class=\"token operator\">=</span> money <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>copiedMoney<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"NO VALUE\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>혹은 <code class=\"language-text\">if let (var) a = nullable</code> 하는 방식으로 형변환한 값을 자동으로 대입해주는 문법 사용</p>\n</li>\n<li>\n<p>GUARD</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> copiedMoney <span class=\"token operator\">=</span> money <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// catch if money == nil</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"NOPE\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// try if money!= nil</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>copiedMoney<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"END\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>try - catch랑 느낌이 비슷함.</p>\n<p>함수 내부에서 보통 사용해서 <code class=\"language-text\">copiedMoney</code>라는 타입가드된 값을 반환하고, 그렇지 않으면 <code class=\"language-text\">ELSE</code>로 catch문 수행</p>\n</li>\n</ol>","frontmatter":{"title":"스위프트 문법 정리 - 1","date":"July 27, 2022","description":null,"category":"iOS"}},"previous":null,"next":{"fields":{"slug":"/React-Native/ReactNative 세팅 - 1/"},"frontmatter":{"title":"ReactNative 세팅 - 1"}}},"pageContext":{"id":"c84627e4-d4d2-546b-9073-7c5852af4be9","previousPostId":null,"nextPostId":"d48613ff-2181-5e77-8a82-ab68383ef418"}},"staticQueryHashes":["2841359383"]}